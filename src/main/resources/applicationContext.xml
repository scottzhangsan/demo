<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://cxf.apache.org/jaxws
		http://cxf.apache.org/schemas/jaxws.xsd
		http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
		">
		
		 <aop:aspectj-autoproxy />
		
		<import resource="classpath:META-INF/cxf/cxf.xml" />  
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml" />  
    <!-- <import resource="classpath:META-INF/cxf/cxf-extension-xml.xml"/>   --> 
		

	<context:component-scan base-package="com">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- Spring的配置文件，这里主要配置和业务逻辑有关的 -->
	<!--=================== 数据源，事务控制，xxx ================-->

	<context:property-placeholder location="classpath:dbconfig.properties"/>
	<bean id ="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
	<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
	<property name="driverClass" value="${jdbc.driverClass}"></property>
	<property name="user" value="${jdbc.user}"></property>
	<property name="password" value="${jdbc.password}"></property>
	</bean>

	<!--================== 配置和MyBatis的整合=============== -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis全局配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="pooledDataSource"></property>
		<!-- 指定mybatis，mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>

	<!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--扫描所有dao接口的实现，加入到ioc容器中 -->
		<property name="basePackage" value="com.atguigu.crud.dao"></property>
	</bean>
	
	<!-- 配置一个可以执行批量的sqlSession -->
	<!-- <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean> -->
	<!--=============================================  -->

	<!-- ===============事务控制的配置 ================-->

	 <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制住数据源  -->
		<property name="dataSource" ref="pooledDataSource"></property>
	</bean>
	
	<tx:annotation-driven/> 
	<!--  使用注解事物-->
	
	
	<!-- 开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式）  -->
	<!-- <aop:config>
		切入点表达式
		<aop:pointcut expression="execution(* com.atguigu.crud.service..*(..))" id="txPoint"/>
		配置事务增强
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	
	配置事务增强，事务如何切入 
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			所有方法都是事务方法
			<tx:method name="*"/>
			以get开始的所有方法 
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>  -->
	
	
	
	
 <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:config/url.properties</value>
				<!-- <value>${mail.properties.location}</value>
				<value>${test.properties.location}</value>
				<value>${token.properties.location}</value>	 -->			
			</list>
		</property>
	</bean> 
	
	<!-- cxf -->
	<!-- <bean id="inMessageInterceptor" class="org.apache.cxf.interceptor.LoggingInInterceptor" />
	<bean id="outMessageInterceptor" class="org.apache.cxf.interceptor.LoggingOutInterceptor" />
	
	 <bean id="getInfoServiceImpl" class="com.sysware.demo.app.service.impl.GetInfoServiceImpl"></bean>   
    <jaxws:endpoint id="getInfoService" implementor="#getInfoServiceImpl" address="/getInfoService">
    <jaxws:inInterceptors>
			<ref bean="inMessageInterceptor" />
		</jaxws:inInterceptors>
		<jaxws:outInterceptors>
			<ref bean="outMessageInterceptor" />
			<ref bean="sgmSoapHeader" />
		</jaxws:outInterceptors> 
    
    </jaxws:endpoint>  -->
    
    
    
    
    
    <!-- 任务调度 -->
    
    <!-- <bean id="SpringQtzJob" class="com.quartz.SpringQtz"/>  
    <bean id="SpringQtzJobMethod" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
    <property name="targetObject">  
        <ref bean="SpringQtzJob"/>  
    </property>  
    <property name="targetMethod">  要执行的方法名称  
        <value>execute</value>  
    </property>  
    是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 
    <property name="concurrent" value="false"/>
</bean>  

<bean id="EmployeeServiceImpl" class="com.atguigu.crud.service.EmployeeServiceImpl" />


<bean id="SpringQtzJobMethodTest" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
    <property name="targetObject">  
        <ref bean="EmployeeServiceImpl"/>  
    </property>  
    <property name="targetMethod">  要执行的方法名称  
        <value>execute</value>  
    </property>  
</bean>



======================== 调度触发器 ========================  
<bean id="CronTriggerBean" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
    <property name="jobDetail" ref="SpringQtzJobMethod"></property>  
    <property name="cronExpression" value="0/5 * * * * ?"></property>  
</bean>  
  
  <bean id="CronTriggerBeanTest" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
    <property name="jobDetail" ref="SpringQtzJobMethodTest"></property>  
    <property name="cronExpression" value="0/10 * * * * ?"></property>  
</bean>
======================== 调度工厂 ========================  
<bean id="SpringJobSchedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
    <property name="triggers">  
        <list>  
            <ref bean="CronTriggerBean"/>  
            <ref bean="CronTriggerBeanTest"/>
        </list>  
    </property>  
</bean>    
     -->
    
	
	<!-- <jaxws:endpoint id="getInfoServiceImpl implementor="#reserveOperationWebService"
		address="/ReserveOperationWebService">
		<jaxws:inInterceptors>
			<ref bean="inMessageInterceptor" />
		</jaxws:inInterceptors>
		<jaxws:outInterceptors>
			<ref bean="outMessageInterceptor" />
			<ref bean="sgmSoapHeader" />
		</jaxws:outInterceptors>
	</jaxws:endpoint> -->
	
	
	
	
	
	
	
	
	
	
	<!-- <bean id ="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	控制数据源
	<property name="dataSource" ref="pooledDataSource"></property>
	开启基于注解的事物 
	<aop:config>
	 切入点表达式
	<aop:pointcut expression="execution(* com.atguigu.crud.service..*(..))" id="txPoint" />
	配置事物增强
	<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint" />
	</aop:config>
	配置事物增强 ,事物如何切入
	<tx:advice id="txAdvice" transaction-manager="transactionManager" >
	<tx:attributes>
	<tx:method name="*" />
	<tx:method name="get*" read-only="true"/>
	</tx:attributes>
	</tx:advice> 
	</bean>-->
	
	<!-- Spring配置文件的核心点（数据源、与mybatis的整合，事务控制） -->
	
	

	
</beans>
